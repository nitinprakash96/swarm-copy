name: Release

on:
  # Trigger the workflow on the new PVP version tag created.
  # https://pvp.haskell.org/
  # See patterns explanation at:
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+.[0-9]+*"

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Zip data directory
        run: |
          zip -r swarm-data.zip ./data || { echo "Unable to create a zip archive."; exit 1;  }

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            LICENSE
            swarm-data.zip

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: Haskell-Release - ${{ matrix.os }} - ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    container:
      # It might be good idea to use older runner for building binary:
      # on latest runners like fedora, it would link symbols in newer
      # system libraries, so users could not run it on older OSes
      image: buildpack-deps:jammy
    strategy:
      matrix:
        # macos-13 points to x64 based OS and mocos-latest points to arm based OS
        os: [ubuntu-latest, macos-13, macos-latest]
        cabal:
            - 3.12.1.0
        ghc:
            - 9.8.2

    steps:
      - uses: haskell-actions/setup@v2
        id: setup-haskell-cabal
        name: Setup Haskell
        with:
            ghc-version: ${{ matrix.ghc }}
            cabal-version: ${{ matrix.cabal }}

      - name: Check out code
        uses: actions/checkout@v4

      - name: cache
        uses: actions/cache@v4
        with:
          key: ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          path: ~/.cabal/store
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
            ${{ matrix.os }}-${{ matrix.ghc }}-

      - name: Install dependencies
        run: |
          cabal v2-build --disable-tests --disable-benchmarks --dependencies-only -j2 all

      - name: Build binary
        run: |
          mkdir dist
          cabal v2-install exe:swarm --install-method=copy --overwrite-policy=always --installdir=dist

      - name: Set binary path name
        run: echo BINARY_PATH="./dist/swarm" >> "$GITHUB_ENV"

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo "upload_url=$(cat release_url.txt)" >> "$GITHUB_OUTPUT"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: swarm-${{ runner.os }}
          asset_content_type: application/octet-stream

      - name: Generate tarball for Hackage
        run: cabal v2-sdist

      # - name: Generate documentation for Hackage
      #   # The hackage-server attempts to build documentation for library packages, but this can fail.
      #   # If it does we can do it ourselves
      #   run: cabal v2-haddock --builddir=docs --haddock-for-hackage --enable-doc

      - uses: haskell-actions/hackage-publish@v1
        with:
          hackageToken: "${{ secrets.HACKAGE_AUTH_TOKEN }}"
          packagesPath: dist-newstyle/sdist
          # docsPath: docs
          publish: true
